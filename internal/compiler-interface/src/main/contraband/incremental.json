{
  "types": [
    {
      "name": "ClassFileManagerType",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "interface",
      "types": [
        {
          "name": "DeleteImmediatelyManagerType",
          "namespace": "xsbti.compile",
          "target": "Java",
          "type": "record",
          "doc": [
           "Constructs a minimal ClassfileManager that immediately deletes class files when requested.",
           "This is the default classfile manager if no type is provided in incremental options."
          ]
        },
        {
          "name": "TransactionalManagerType",
          "namespace": "xsbti.compile",
          "target": "Java",
          "type": "record",
          "doc": [
            "Constructs a transactional ClassFileManager implementation that restores class",
            "files to the way they were before compilation if there is an error. Otherwise, it",
            "keeps the successfully generated class files from the new compilation."
          ],
          "fields": [
            { "name": "backupDirectory", "type": "java.io.File" },
            { "name": "logger",          "type": "xsbti.Logger" }
          ]
        }
      ]
    },
    {
      "name": "IncOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": [
        "Represents all configuration options for the incremental compiler itself and",
        "not the underlying Java/Scala compiler."
      ],
      "fields": [
        {
          "name": "transitiveStep",
          "type": "int",
          "doc": "After which step include whole transitive closure of invalidated source files."
        },
        {
          "name": "recompileAllFraction",
          "type": "double",
          "doc": [
            "What's the fraction of invalidated source files when we switch to recompiling",
            "all files and giving up incremental compilation altogether. That's useful in",
            "cases when probability that we end up recompiling most of source files but",
            "in multiple steps is high. Multi-step incremental recompilation is slower",
            "than recompiling everything in one step."
          ]
        },
        {
          "name": "relationsDebug",
          "type": "boolean",
          "doc": "Print very detailed information about relations, such as dependencies between source files."
        },
        {
          "name": "apiDebug",
          "type": "boolean",
          "doc": "Enable tools for debugging API changes."
        },
        {
          "name": "apiDiffContextSize",
          "type": "int",
          "doc": [
            "Controls context size (in lines) displayed when diffs are produced for textual API",
            "representation.",
            "",
            "This option is used only when `apiDebug == true`."
          ]
        },
        {
          "name": "apiDumpDirectory",
          "type": "java.util.Optional<java.io.File>",
          "doc": [
            "The directory where we dump textual representation of APIs. This method might be called",
            "only if apiDebug returns true. This is unused option at the moment as the needed functionality",
            "is not implemented yet."
          ]
        },
        {
          "name": "classfileManagerType",
          "type": "java.util.Optional<ClassFileManagerType>",
          "doc": "ClassfileManager that will handle class file deletion and addition during a single incremental compilation run."
        },
        {
          "name": "useCustomizedFileManager",
          "type": "boolean",
          "doc": [
            "Option to turn on customized file manager that tracks generated class files for transactional rollbacks.",
            "Using customized file manager may conflict with some libraries, this option allows user to decide",
            "whether to use."
          ]
        },
        {
          "name": "recompileOnMacroDef",
          "type": "java.util.Optional<Boolean>",
          "doc": [
            "Determines whether incremental compiler should recompile all dependencies of a file",
            "that contains a macro definition."
          ]
        },
        {
          "name": "useOptimizedSealed",
          "type": "boolean",
          "doc": [
            "Determines whether optimized approach for invalidating sealed classes/trait is used.",
            "Turning this on may cause undercompilation in case of macros that are based sealed",
            "trait/class children enumeration."
          ]
        },
        {
          "name": "storeApis",
          "type": "boolean",
          "doc": [
            "Determines whether incremental compiler stores apis alongside analysis."
          ]
        },
        {
          "name": "enabled",
          "type": "boolean",
          "doc": [
            "Determines whether incremental compilation is enabled."
          ]
        },
        {
          "name": "extra",
          "type": "java.util.Map<String,String>",
          "doc": "Extra options"
        },
        {
          "name": "logRecompileOnMacro",
          "type": "boolean",
          "doc": "Determines whether to log information on file recompiled due to a transitive macro change"
        },
        {
          "name": "externalHooks",
          "type": "xsbti.compile.ExternalHooks",
          "doc": "External hooks that allows clients e.g. IDEs to interacts with compilation internals"
        }
      ]
    },
    {
      "name": "CompileOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "Compilation options",
      "fields": [
        {
          "name": "classpath",
          "type": "java.io.File*",
          "doc": [
            "The classpath to use for compilation.",
            "This will be modified according to the ClasspathOptions used to configure the ScalaCompiler."
          ]
        },
        {
          "name": "sources",
          "type": "java.io.File*",
          "doc": [
            "All sources that should be recompiled.",
            "This should include Scala and Java sources, which are identified by their extension."
          ]
        },
        { "name": "classesDirectory", "type": "java.io.File" },
        {
          "name": "scalacOptions",
          "type": "String*",
          "doc": "The options to pass to the Scala compiler other than the sources and classpath to use."
        },
        {
          "name": "javacOptions",
          "type": "String*",
          "doc": "The options to pass to the Java compiler other than the sources and classpath to use."
        },
        { "name": "maxErrors", "type": "int" },
        {
          "name": "sourcePositionMapper",
          "type": "java.util.function.Function<xsbti.Position, xsbti.Position>"
        },
        {
          "name": "order",
          "type": "xsbti.compile.CompileOrder",
          "doc": "Controls the order in which Java and Scala sources are compiled."
        }
      ]
    },
    {
      "name": "FileHash",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "fields": [
        { "name": "file", "type": "java.io.File" },
        { "name": "hash", "type": "int"    }
      ]
    },
    {
      "name": "MiniOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "Compilation options. This is used as part of CompileSetup.",
      "fields": [
        {
          "name": "classpathHash",
          "type": "FileHash*",
          "doc": [
            "The classpath to use for compilation.",
            "This will be modified according to the ClasspathOptions used to configure the ScalaCompiler."
          ]
        },
        {
          "name": "scalacOptions",
          "type": "String*",
          "doc": "The options to pass to the Scala compiler other than the sources and classpath to use."
        },
        {
          "name": "javacOptions",
          "type": "String*",
          "doc": "The options to pass to the Java compiler other than the sources and classpath to use."
        }
      ]
    },
    {
      "name": "IncToolOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": [
        "Define the component that manages the generated class files and defines the",
        "configuration options for an incremental compiler. This component is used by",
        "any Java compiler that implements {@link xsbti.compile.JavaTools} and they",
        "should return empty values by default because the incremental tool options",
        "are not enabled for Java tools, they are only enabled for Scala's incremental",
        "compiler."
      ],
      "fields": [
        {
          "name": "classFileManager",
          "type": "java.util.Optional<xsbti.compile.ClassFileManager>",
          "doc": "Define a component that manages the generated class files in every compilation cycle."
        },
        {
          "name": "useCustomizedFileManager",
          "type": "boolean",
          "doc": "Flag that enables use of a customized {@link xsbti.compile.ClassFileManager}."
        }
      ]
    },
    {
      "name": "MiniSetup",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "This is used as part of CompileResult.",
      "fields": [
        { "name": "output",          "type": "xsbti.compile.Output"       },
        { "name": "options",         "type": "xsbti.compile.MiniOptions"  },
        { "name": "compilerVersion", "type": "String"                     },
        { "name": "order",           "type": "xsbti.compile.CompileOrder" },
        { "name": "storeApis",       "type": "boolean"                    },
        { "name": "extra",           "type": "xsbti.T2<String, String>*"  }
      ]
    },
    {
      "name": "CompileResult",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "The result of running the incremental compilation.",
      "fields": [
        { "name": "analysis",    "type": "xsbti.compile.CompileAnalysis" },
        { "name": "setup",       "type": "xsbti.compile.MiniSetup"       },
        { "name": "hasModified", "type": "boolean"                       }
      ]
    },
    {
      "name": "PreviousResult",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "The previous source dependency analysis result from compilation.",
      "fields": [
        { "name": "analysis", "type": "java.util.Optional<xsbti.compile.CompileAnalysis>" },
        { "name": "setup",    "type": "java.util.Optional<xsbti.compile.MiniSetup>"       }
      ]
    },
    {
      "name": "Setup",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "Configures incremental recompilation.",
      "fields": [
        {
          "name": "perClasspathEntryLookup",
          "type": "xsbti.compile.PerClasspathEntryLookup",
          "doc": "Provides a lookup of data structures and operations associated with a single classpath entry."
        },
        {
          "name": "skip",
          "type": "boolean",
          "doc": "If true, no sources are actually compiled and the Analysis from the previous compilation is returned."
        },
        {
          "name": "cacheFile",
          "type": "java.io.File",
          "doc": [
            "The file used to cache information across compilations.",
            "This file can be removed to force a full recompilation.",
            "The file should be unique and not shared between compilations."
          ]
        },
        { "name": "cache",                      "type": "xsbti.compile.GlobalsCache" },
        { "name": "incrementalCompilerOptions", "type": "xsbti.compile.IncOptions"   },
        {
          "name": "reporter",
          "type": "xsbti.Reporter",
          "doc": "The reporter that should be used to report scala compilation to."
        },
        {
          "name": "progress",
          "type": "java.util.Optional<xsbti.compile.CompileProgress>",
          "doc": "Optionally provide progress indication."
        },
        { "name": "extra", "type": "xsbti.T2<String, String>*" }
      ]
    },
    {
      "name": "Inputs",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "Configures a single compilation of a single set of sources.",
      "fields": [
        {
          "name": "compilers",
          "type": "xsbti.compile.Compilers",
          "doc": "Return the Scala and Java compilers to use for compilation."
        },
        {
          "name": "options",
          "type": "xsbti.compile.CompileOptions",
          "doc": "Return the compilation options, such as the sources and classpath to use."
        },
        {
          "name": "setup",
          "type": "xsbti.compile.Setup",
          "doc": "Represent the configuration of incremental compilation."
        },
        {
          "name": "previousResult",
          "type": "xsbti.compile.PreviousResult",
          "doc": "Represent tha latest result of incremental compilation."
        }
      ]
    },
    {
      "name": "Compilers",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": "The instances of Scalac/Javac used to compile the current project.",
      "fields": [
        {
          "name": "scalac",
          "type": "xsbti.compile.ScalaCompiler",
          "doc": [
            "A `ScalaCompiler`.",
            "It should be cached by the client if desired."
          ]
        },
        {
          "name": "javaTools",
          "type": "xsbti.compile.JavaTools",
          "doc": "Tool chain of Java."
        }
      ]
    },
    {
      "name": "ClasspathOptions",
      "namespace": "xsbti.compile",
      "target": "Java",
      "type": "record",
      "doc": [
        "Define modifications to classpaths based on the {@link ScalaInstance} used for",
        "compilation. This class tells how to instrument the classpaths given certain Scala",
        "compiler-related parameters. Usually, values are all false for Java compilation."
      ],
      "fields": [
        {
          "name": "bootLibrary",
          "type": "boolean",
          "doc": [
            "If true, includes the Scala library on the boot classpath.",
            "This should usually be true."
          ]
        },
        {
          "name": "compiler",
          "type": "boolean",
          "doc": [
            "If true, includes the Scala compiler on the standard classpath.",
            "This is typically false and is instead managed by the build tool or environment."
          ]
        },
        {
          "name": "extra",
          "type": "boolean",
          "doc": [
            "If true, includes extra jars from the Scala instance on the standard classpath.",
            "This is typically false and is instead managed by the build tool or environment."
          ]
        },
        {
          "name": "autoBoot",
          "type": "boolean",
          "doc": [
            "If true, automatically configures the boot classpath.",
            "This should usually be true."
          ]
        },
        {
          "name": "filterLibrary",
          "type": "boolean",
          "doc": [
            "If true, the Scala library jar is filtered from the standard classpath.",
            "This should usually be true because the library should be included on the boot classpath of the Scala compiler and not the standard classpath."
          ]
        }
      ]
    }
  ]
}
